# Cloud Deployment Configuration for AutoPilot Ventures Autonomous Operation
# Updated: 2025-07-20 - Complete Phase 1, 2, and 3 Implementation
# Features: Vector Memory, Self-Tuning Agents, RL Engine, Autonomous Workflows
# Advanced Intelligence: MLflow, Dynamic Decision Trees, Cross-Venture Learning, Predictive Analytics

# AWS CloudFormation Template for Autonomous Startup Factory
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AutoPilot Ventures Autonomous Startup Factory - Complete Phase 1-3 Implementation'

Parameters:
  Environment:
    Type: String
    Default: production
    Description: Environment name (production, staging, development)

  AutonomyLevel:
    Type: String
    Default: fully_autonomous
    Description: Autonomy level for the agents

  BudgetThreshold:
    Type: String
    Default: 50
    Description: Budget threshold for alerts

  ImageUrl:
    Type: String
    Default: 160277203814.dkr.ecr.us-east-1.amazonaws.com/autopilot-ventures:latest
    Description: ECR image URL for the AutoPilot Ventures container

  PublicSubnet1:
    Type: String
    Default: subnet-028bbe7733e9d9516
    Description: First public subnet ID

  PublicSubnet2:
    Type: String
    Default: subnet-033606419f5f87330
    Description: Second public subnet ID

  PublicSubnet3:
    Type: String
    Default: subnet-038f5efbdc9615ca7
    Description: Third public subnet ID

  VPC:
    Type: String
    Default: vpc-0e6882b31d339a158
    Description: VPC ID

Resources:
  # ECS Cluster for autonomous agents
  AutopilotCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'autopilot-ventures-P-${Environment}-${AWS::StackName}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # --- BEGIN: MasterAgentTask and MasterAgentService commented out for infra test ---
  # ECS Task Definition for Master Agent with Phase 3 Features
  MasterAgentTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - MasterAgentLogGroup
      - ECSTaskExecutionRole
    Properties:
      Family: !Sub 'master-agent-F-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'  # 2 vCPU for advanced intelligence
      Memory: '4096'  # 4 GB for ML models and vector memory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSServiceRole.Arn
      ContainerDefinitions:
        - Name: master-agent
          Image: !Ref ImageUrl
          Command:
            - python
            - main.py
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: AUTONOMY_LEVEL
              Value: !Ref AutonomyLevel
            - Name: BUDGET_THRESHOLD
              Value: !Ref BudgetThreshold
            - Name: PHASE3_ENABLED
              Value: 'true'
            - Name: VECTOR_MEMORY_ENABLED
              Value: 'true'
            - Name: SELF_TUNING_ENABLED
              Value: 'true'
            - Name: REINFORCEMENT_LEARNING_ENABLED
              Value: 'true'
            - Name: AUTONOMOUS_WORKFLOW_ENABLED
              Value: 'true'
            - Name: PORT
              Value: '8000'
            - Name: HOST
              Value: '0.0.0.0'
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
            - ContainerPort: 9090
              Protocol: tcp
            - ContainerPort: 8501
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MasterAgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: master-agent
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8000/ || exit 1
            Interval: 60
            Timeout: 30
            Retries: 3
            StartPeriod: 120

  # ECS Service for Master Agent
  MasterAgentService:
    Type: AWS::ECS::Service
    DependsOn:
      - MasterAgentTask
      - MasterAgentLogGroup
      - ECSTaskExecutionRole
      - AutopilotSecurityGroup
    Properties:
      ServiceName: !Sub 'master-agent-service-final-${Environment}'
      Cluster: !Ref AutopilotCluster
      TaskDefinition: !Ref MasterAgentTask
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: false
          Rollback: false
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref AutopilotSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
            - !Ref PublicSubnet3
          AssignPublicIp: ENABLED
  # --- END: MasterAgentTask and MasterAgentService commented out ---

  # EventBridge Rule for Daily Discovery Cycle
  DailyDiscoveryRule:
    Type: AWS::Events::Rule
    DependsOn:
      - AutopilotSecurityGroup
    Properties:
      Name: !Sub 'daily-discovery-P-${Environment}-${AWS::StackName}'
      Description: 'Daily niche discovery cycle at 6 AM UTC with Phase 3 intelligence'
      ScheduleExpression: 'cron(0 6 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/autopilot-ventures-P-${Environment}-${AWS::StackName}'
          Id: daily-discovery
          RoleArn: !GetAtt EventBridgeECSRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref MasterAgentTask
            TaskCount: 1
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref AutopilotSecurityGroup
                Subnets:
                  - !Ref PublicSubnet1
                  - !Ref PublicSubnet2

  # EventBridge Rule for Weekly Evaluation
  WeeklyEvaluationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'weekly-evaluation-P-${Environment}-${AWS::StackName}'
      Description: 'Weekly venture evaluation on Mondays at 9 AM UTC with advanced analytics'
      ScheduleExpression: 'cron(0 9 ? * MON *)'
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/autopilot-ventures-P-${Environment}-${AWS::StackName}'
          Id: weekly-evaluation
          RoleArn: !GetAtt EventBridgeECSRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref MasterAgentTask
            TaskCount: 1
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref AutopilotSecurityGroup
                Subnets:
                  - !Ref PublicSubnet1
                  - !Ref PublicSubnet2

  # EventBridge Rule for Monthly Scaling Review
  MonthlyScalingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'monthly-scaling-P-${Environment}-${AWS::StackName}'
      Description: 'Monthly scaling review on 1st of month at 10 AM UTC with predictive analytics'
      ScheduleExpression: 'cron(0 10 1 * ? *)'
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/autopilot-ventures-P-${Environment}-${AWS::StackName}'
          Id: monthly-scaling
          RoleArn: !GetAtt EventBridgeECSRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref MasterAgentTask
            TaskCount: 1
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref AutopilotSecurityGroup
                Subnets:
                  - !Ref PublicSubnet1
                  - !Ref PublicSubnet2

  # EventBridge Rule for Intelligence Updates
  IntelligenceUpdateRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'intelligence-update-P-${Environment}-${AWS::StackName}'
      Description: 'Daily intelligence update at 2 AM UTC for cross-venture learning'
      ScheduleExpression: 'cron(0 2 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/autopilot-ventures-P-${Environment}-${AWS::StackName}'
          Id: intelligence-update
          RoleArn: !GetAtt EventBridgeECSRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref MasterAgentTask
            TaskCount: 1
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref AutopilotSecurityGroup
                Subnets:
                  - !Ref PublicSubnet1
                  - !Ref PublicSubnet2

  # Lambda Function for Budget Alerts
  BudgetAlertFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'budget-alert-final-${Environment}-${AWS::StackName}'
      Runtime: python3.9
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def handler(event, context):
              sns = boto3.client('sns')
              topic_arn = os.environ['ALERT_TOPIC_ARN']
              
              message = {
                  'subject': 'AutoPilot Ventures V4 Budget Alert',
                  'body': f"Budget threshold reached: {event['current_spend']} / {event['budget_limit']}"
              }
              
              sns.publish(
                  TopicArn=topic_arn,
                  Message=json.dumps(message),
                  Subject='AutoPilot Ventures V4 Budget Alert'
              )
              
              return {'statusCode': 200}
      Environment:
        Variables:
          ALERT_TOPIC_ARN: !Ref AlertTopic
      Role: !GetAtt LambdaExecutionRole.Arn

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'autopilot-vP-alerts-${Environment}-${AWS::StackName}'
      DisplayName: 'AutoPilot Ventures V5 Alerts'

  # CloudWatch Log Groups
  MasterAgentLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub '/ecs/master-agent-final-${Environment}-${AWS::StackName}'
      RetentionInDays: 30

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ecs-task-execution-P-${Environment}-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:autopilot-*'

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ecs-task-P-${Environment}-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !GetAtt MasterAgentLogGroup.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:aws:s3:::autopilot-ventures-F1-${Environment}'
                  - !Sub 'arn:aws:s3:::autopilot-ventures-F1-${Environment}/*'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'lambda-execution-P-${Environment}-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AlertTopic

  # IAM Role for EventBridge to execute ECS tasks
  EventBridgeECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'eventbridge-ecs-P-${Environment}-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole
      Policies:
        - PolicyName: ECSTaskExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::Region}:task/*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ECSTaskExecutionRole.Arn
                  - !GetAtt ECSServiceRole.Arn

  # Security Group for ECS Service
  AutopilotSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: autopilot-sg-final
      GroupDescription: 'Security group for AutoPilot Ventures ECS service'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: 'Allow inbound traffic on port 8000'
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
          Description: 'Allow inbound traffic on port 9090'
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
          Description: 'Allow inbound traffic on port 8501'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'Allow all outbound traffic'

Outputs:
  ClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref AutopilotCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  MasterAgentServiceName:
    Description: 'Master Agent Service Name'
    Value: !Ref MasterAgentService
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'

  AlertTopicArn:
    Description: 'SNS Topic for Alerts'
    Value: !Ref AlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-AlertTopic'