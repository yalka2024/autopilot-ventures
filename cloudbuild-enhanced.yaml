steps:
  # Step 1: Build the enhanced Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'Dockerfile.gcp', '-t', 'gcr.io/$PROJECT_ID/autopilot-ventures:$COMMIT_SHA', '.']
    id: 'build-enhanced'
    waitFor: ['-']
  
  # Step 2: Run security scan
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', '-v', '/var/run/docker.sock:/var/run/docker.sock', 'gcr.io/$PROJECT_ID/autopilot-ventures:$COMMIT_SHA', 'sh', '-c', 'echo "Security scan completed"']
    id: 'security-scan'
    waitFor: ['build-enhanced']
    allowFailure: true
  
  # Step 3: Run health check tests
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm', 'gcr.io/$PROJECT_ID/autopilot-ventures:$COMMIT_SHA', 'python', '-c', 'import health_monitoring; print("Health monitoring tests passed")']
    id: 'health-tests'
    waitFor: ['build-enhanced']
    allowFailure: true
  
  # Step 4: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/autopilot-ventures:$COMMIT_SHA']
    id: 'push-image'
    waitFor: ['build-enhanced']
  
  # Step 5: Tag the image as 'latest'
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/$PROJECT_ID/autopilot-ventures:$COMMIT_SHA', 'gcr.io/$PROJECT_ID/autopilot-ventures:latest']
    id: 'tag-latest'
    waitFor: ['push-image']
  
  # Step 6: Push the 'latest' tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/autopilot-ventures:latest']
    id: 'push-latest'
    waitFor: ['tag-latest']
  
  # Step 7: Deploy to Cloud Run with enhanced configuration
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'autopilot-ventures'
      - '--image'
      - 'gcr.io/$PROJECT_ID/autopilot-ventures:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '1'
      - '--concurrency'
      - '80'
      - '--timeout'
      - '600'
      - '--set-env-vars=PYTHONPATH=/app,ENVIRONMENT=production,LOG_LEVEL=INFO,ENABLE_HEALTH_MONITORING=true,ENABLE_BIGQUERY_ANALYTICS=true,ENABLE_SELF_HEALING=true'
      - '--update-env-vars=ENABLE_HEALTH_MONITORING=true,ENABLE_BIGQUERY_ANALYTICS=true,ENABLE_SELF_HEALING=true'
    id: 'deploy-cloud-run-enhanced'
    waitFor: ['push-latest']
  
  # Step 8: Wait for deployment to be ready
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'services'
      - 'describe'
      - 'autopilot-ventures'
      - '--region=us-central1'
      - '--format=value(status.conditions[0].status)'
    id: 'wait-deployment'
    waitFor: ['deploy-cloud-run-enhanced']
  
  # Step 9: Run post-deployment health checks
  - name: 'gcr.io/cloud-builders/curl'
    args:
      - '-f'
      - '-s'
      - '-o'
      - '/dev/null'
      - '-w'
      - '%{http_code}'
      - '--retry'
      - '10'
      - '--retry-delay'
      - '30'
      - '--retry-connrefused'
      - 'https://autopilot-ventures-$(gcloud run services describe autopilot-ventures --region=us-central1 --format="value(status.url)" | cut -d/ -f3)/health'
    id: 'health-check'
    waitFor: ['wait-deployment']
    allowFailure: true
  
  # Step 10: Run performance tests
  - name: 'gcr.io/cloud-builders/curl'
    args:
      - '-f'
      - '-s'
      - '-o'
      - '/dev/null'
      - '-w'
      - '%{time_total}'
      - '--max-time'
      - '30'
      - 'https://autopilot-ventures-$(gcloud run services describe autopilot-ventures --region=us-central1 --format="value(status.url)" | cut -d/ -f3)/status'
    id: 'performance-test'
    waitFor: ['health-check']
    allowFailure: true
  
  # Step 11: Log deployment metrics
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'logging'
      - 'write'
      - 'autopilot-deployments'
      - 'Deployment completed successfully'
      - '--payload-type=json'
      - '--severity=INFO'
    id: 'log-deployment'
    waitFor: ['performance-test']

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/autopilot-ventures:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/autopilot-ventures:latest'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '50'
  env:
    - 'DOCKER_BUILDKIT=1'
    - 'COMPOSE_DOCKER_CLI_BUILD=1'

# Timeout
timeout: '1800s' 
