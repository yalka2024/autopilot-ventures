version: '3.8'

services:
  # Main AutoPilot Ventures application
  autopilot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: autopilot-ventures
    restart: unless-stopped
    ports:
      - "8501:8501"  # Streamlit dashboard
      - "9090:9090"  # Metrics endpoint
    command: ["python", "main.py", "--start-autonomous", "--autonomous-mode", "semi"]
    environment:
      - OPENAI_SECRET_KEY=${OPENAI_SECRET_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - SERPAPI_KEY=${SERPAPI_KEY}
      - AHREFS_API_KEY=${AHREFS_API_KEY}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - GODADDY_API_KEY=${GODADDY_API_KEY}
      - GODADDY_API_SECRET=${GODADDY_API_SECRET}
      - VERCEL_TOKEN=${VERCEL_TOKEN}
      - NETLIFY_TOKEN=${NETLIFY_TOKEN}
      - MONTHLY_BUDGET=${MONTHLY_BUDGET:-500.0}
      - STARTUP_BUDGET=${STARTUP_BUDGET:-100.0}
      - MARKETING_BUDGET=${MARKETING_BUDGET:-50.0}
      - MAX_CONCURRENT_STARTUPS=${MAX_CONCURRENT_STARTUPS:-20}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - autopilot_data:/app/data
      - autopilot_logs:/app/logs
      - autopilot_startups:/app/startups
      - autopilot_backups:/app/backups
    depends_on:
      - redis
    networks:
      - autopilot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: autopilot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autopilot-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for additional data storage (optional)
  mongodb:
    image: mongo:6
    container_name: autopilot-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-autopilot}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-autopilot123}
    volumes:
      - mongodb_data:/data/db
    networks:
      - autopilot-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: autopilot-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - autopilot-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: autopilot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - autopilot-network
    depends_on:
      - prometheus

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: autopilot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - autopilot
    networks:
      - autopilot-network
    profiles:
      - production

volumes:
  autopilot_data:
    driver: local
  autopilot_logs:
    driver: local
  autopilot_startups:
    driver: local
  autopilot_backups:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  autopilot-network:
    driver: bridge 